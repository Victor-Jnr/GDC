export ROOT_PW=${ROOT_PW:=ContainersRule} # sets root password in container

export USE_WORKSPACE=${USE_WORKSPACE:=yes}

export USE_AWS_HOME=${USE_AWS_HOME:=yes} # copy .aws folder from host home if exists and enables USE_HOST_HOME=yes
export USE_HOME_BIN=${USE_HOME_BIN:=no}  # copy bin folder from host home directory if it exists and  enables USE_HOST_HOME=yes

if [[ "$USE_HOME_BIN" = "yes" || "$USE_AWS_HOME" = "yes" ]]; then
  USE_HOST_HOME=yes
fi

export USE_HOST_HOME=${USE_HOST_HOME:=yes} # mount home directory from host

if [ -z ${PULUMI_VERSION+x} ]; then
  export PULUMI_VERSION=3.38.0 # install this version of pulumi by default
fi
if [ -z ${PHP_VERSION+x} ]; then
  export PHP_VERSION='' # available PHP versions 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, 8.0, 8.1
fi
if [ -z ${GOLANG_VERSION+x} ]; then
  export GOLANG_VERSION='' # install this golang version. blank for none. latest is 1.18
fi

export USE_PRECOMMIT=${USE_PRECOMMIT:=yes} # use pre-commit hooks in git to format and lint files
# pre-commit requires python and will enable it if needed
if [[ -z ${PYTHON_VERSION+x} && "$USE_PRECOMMIT" = "yes" ]]; then
  export PYTHON_VERSION=3.9.13 # install this python version
fi

export USE_BITWARDEN=${USE_BITWARDEN:=yes}                        # enable bitwarden workflow helpers. requires node install
export PERSIST_BITWARDEN_SESSION=${PERSIST_BITWARDEN_SESSION:=no} # persist unlocked vault creds between container sessions

# if bitwarden is enabled, ensure node is also enabled
if [[ "$USE_BITWARDEN" = "yes" && -z "$NODE_VERSION" ]]; then
  export NODE_VERSION=18 # install this version of node.
fi

export USE_AWS=${USE_AWS:=yes} # install latest aws cli, ssm plugin, and ecr helper

export LS_VERSION=${LS_VERSION:=''}                                   # starts requested localstack container version
export LS_MAIN_CONTAINER_NAME=${LS_MAIN_CONTAINER_NAME:='localstack'} # used by localstack to name main container
export USE_LOCALSTACK=${USE_LOCALSTACK:=yes}                          # does not install or start localstack. Only sets up some helpers
export USE_LOCALSTACK_HOST=${USE_LOCALSTACK_HOST:=yes}                # does not install or start localstack. Only sets up some helpers

export USE_AUTH0=${USE_AUTH0:=no}                                 # starts up auth0 mock container in container only mode
export USE_AUTH0_HOST=${USE_AUTH0_HOST:=no}                       # starts up auth0 mock container and forwards port from host. Use AUTH0_HOST_PORT to change default of 3001
export AUTH0_HOST_PORT=${AUTH0_HOST_PORT:=3001}                   # default port for AUTH0 mock if enabled
export AUTH0_CONTAINER_NAME="${AUTH0_CONTAINER_NAME:=auth0_mock}" # set name of auth0 container so more than one can be used in parallel
export AUTH0_LOCAL_USERS_FILE=${AUTH0_LOCAL_USERS_FILE:=''}       # used to specify location in container for auth0 to mount user override file

export USE_DOT_NET=${USE_DOT_NET:=no} # install ubuntu:latest dotnet core packages
export USE_JAVA=${USE_JAVA:=no}       # install ubuntu:latest openjdk packages

export EDITOR=${EDITOR:=vi} # sets default editor in container. usually set to same as VISUAL
export VISUAL=${VISUAL:=vi} # sets default editor in container. usually set to same as EDITOR
if [ -z ${SSH_KEYSCAN_HOSTS+x} ]; then
  export SSH_KEYSCAN_HOSTS="gitlab.com github.com bitbucket.org" # copy ssh keys from these hosts to prevent unknown key prompts
fi
export DEVNET_NAME=${DEVNET_NAME:=""}
export DEVNET_SUBNET=${DEVNET_SUBNET:=""}
export DEVNET_GATEWAY=${DEVNET_GATEWAY:=""}

export USE_COLOR_PROMPT=${USE_COLOR_PROMPT:=yes} # enable colored bash prompt

export CHECK_UPDATES=${CHECK_UPDATES:=yes} # check for updates on each login
